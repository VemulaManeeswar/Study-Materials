Aggregate functions are:
used to implement calculation based upon a particular column.These functions always return a single value.

Aggregate functions are:

1. SUM()
This function is used to find the total value of a particular column.
 SELECT SUM (Fees) FROM STUDENT; 

Calculate the Total Fees Paid by All Students:

SELECT SUM(Fees) AS TotalFeesPaid
FROM Student;


2. AVG()
This function is used to find the average value of a particular column

SELECT AVG (Fees) FROM STUDENT;

Calculate the Average Fees for Students:

SELECT AVG(Fees) AS AverageFees
FROM Student;


3. MAX()
This function is used to find the maximum value of a particular column.

SELECT MAX (Fees) FROM STUDENT; 

Find the Maximum and Minimum Fees:

SELECT MAX(Fees) AS MaxFees, MIN(Fees) AS MinFees
FROM Student;


4. MIN()
This function is used to find the minimum value of a particular column
 SELECT MIN (Fees) FROM STUDENT; 

5. COUNT() AND COUNT(*)
COUNT()This function is used to find the number of values (i.e. number of rows) of 
a particular column.

The COUNT (*) function returns the total number of records in a table, 
counts NULL values also 

Count the Total Number of Students

SELECT COUNT(*) AS TotalStudents
FROM Student;


SELECT DISTINCT

	The SELECT DISTINCT statement is used to return only distinct (different) values.

SELECT DISTINCT Country FROM Customers;

counts and returns the number of different (distinct) countries in the "Customers"

SELECT COUNT(DISTINCT Country) FROM Customers;
------------------------------------------------------------------------
WHERE
------------------------------------------------------------------------
SELECT * FROM Products;

SELECT * FROM Products
WHERE Price > 30;

SELECT * FROM Products
WHERE Price BETWEEN 50 AND 60;
_____________________________________________

CREATE TABLE Customers_data(
    CustomerID INT NOT NULL AUTO_INCREMENT,
    CustomerName VARCHAR(255) NOT NULL,
    ContactName VARCHAR(255),
    Address VARCHAR(255),
    City VARCHAR(255),
    PostalCode VARCHAR(10),
    Country VARCHAR(255),
    PRIMARY KEY (CustomerID)
);
-------------------------------------------------
INSERT INTO Customers_data (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES
('Alfreds', 'Maria Anders', 'Obere Str. 57', 'Berlin', '12209', 'Germany'),
('Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Avda. de la Constitución 2222', 'México D.F.', '05021', 'Mexico'),
('Antonio Moreno Taquería', 'Antonio Moreno', 'Mataderos 2312', 'México D.F.', '05023', 'Mexico'),
('Around the Horn', 'Thomas Hardy', '120 Hanover Sq.', 'London', 'WA1 1DP', 'UK'),
('Berglunds snabbköp', 'Christina Berglund', 'Berguvsvägen 8', 'Luleå', 'S-958 22', 'Sweden');



WHERE clause can be combined with AND,OR,NOT

AND

OR

NOT

DELETE

BETWEEN
---------------------------------------------------------------------------
LIKE:LIKE searches for a specified pattern in a column.


Wildcards:
A wildcard character is used to substitute one or more characters in a string.

Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

%	Represents zero or more characters	bl%  finds   bl, black, blue, and blob
_	Represents a single character		h_t   finds   hot, hat, and hit
___________________________________________________________________________
x% 	— will select all values that begin with x
%x% 	— will select all values that include x
%x 	— will select all values that end with x
x%y 	— will select all values that begin with x and end with y
 _x% 	— will select all values have x as the second character
 x_% 	— will select all values that begin with x and are at least two characters long.
You can add additional _ characters to extend the length requirement, i.e. x___%

------------------------------------------------------------------------------

selects all customers with a CustomerName starting with "a":

SELECT * FROM Customers_data WHERE CustomerName LIKE 'a%';

selects all customers with a CustomerName ending with "a":
SELECT * FROM Customers_data WHERE CustomerName LIKE '%a';

selects all customers with a CustomerName that have "or" in any position:

SELECT * FROM Customers_data WHERE CustomerName LIKE '%or%';

selects all customers with a CustomerName that have "r" in the second position

SELECT * FROM Customers_data WHERE CustomerName LIKE '_r%';

selects all customers with a CustomerName that starts with "a" and are at least 3 characters in length
SELECT * FROM Customers_data WHERE CustomerName LIKE 'a__%';

selects all customers with a ContactName that starts with "a" and ends with "o":
SELECT * FROM Customers_data WHERE CustomerName LIKE 'a%o';

selects all customers with a CustomerName that does NOT start with "a":
SELECT * FROM Customers_data WHERE CustomerName NOT LIKE 'a%';

selects all customers with a City starting with "ber"

SELECT * FROM Customers_data
WHERE City LIKE 'ber%';

selects all customers with a City containing the pattern "es"
SELECT * FROM Customers_data
WHERE City LIKE '%es%';

selects all customers with a City starting with any character, followed by "ondon"
SELECT * FROM Customers_data
WHERE City LIKE '_ondon%';

selects all customers with a City starting with "B", followed by any character, followed by "B", followed by any character.

SELECT * FROM Customer_data WHERE City LIKE 'B_B_';


Select all records where the second letter of the City is an "a"

SELECT * FROM Customers
WHERE City LIKE '_a%';